<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="net.edu.module.dao.JudgeRecordDao">


    <insert id="insertSubmitRecord" useGeneratedKeys="true" keyProperty="id" keyColumn="id"
            parameterType="net.edu.module.vo.JudgeRecordSubmitVO">
        insert into judge_record (problem_id, problem_type, source, source_id, user_id, submit_content, submit_img,
                                  language_type,
                                  submit_status, file_path)
        values (#{problemId}, #{problemType}, #{source}, #{sourceId}, #{userId}, #{submitContent}, #{submitImg},
                #{languageType},
                #{submitStatus}, #{filePath})
    </insert>
    <select id="selectUpdateRecord" resultType="net.edu.module.vo.JudgeSampleResultVO">
        select record_id                               as recordId,
               avg(runtime)                            as runtime,
               avg(memory)                             as memory,
               max(result_code)                        as resultCode,
               sum(if(result_code = 3, 1, 0)) / sum(1) as passRate
        from judge_record_sample
        where record_id = #{recordId}
    </select>

    <update id="updateRecord" parameterType="net.edu.module.vo.JudgeSampleResultVO">
        update judge_record
        set runtime= #{runtime},
            memory=#{memory},
            submit_status=#{resultCode},
            pass_rate=#{passRate}
        where id = #{recordId}
    </update>

    <select id="selectCodeProblemSubmit" resultType="net.edu.module.vo.CodeProblemSubmitVO">
        select a.id             as recordId,
               a.problem_id     as problemId,
               a.submit_content as submitCode,
               language_type    as languageType,
               time_limit       as timeLimit,
               memory_limit     as memoryLimit,
               sample_num       as sampleNum
        from judge_record a
                 join problem_code b on a.problem_id = b.id
        where a.id = #{recordId}
    </select>

    <select id="selectResult" resultType="net.edu.module.vo.JudgeRecordSubmitVO">
        select user_id as userId, submit_status as submitStatus
        from judge_record
        where id = #{recordId}
    </select>

    <select id="selectRecord" resultType="net.edu.module.vo.JudgeRecordSubmitVO">
        select id,
               problem_id     as problemId,
               problem_type   as problemType,
               source,
               source_id      as sourceId,
               user_id        as userId,
               submit_time    as submitTime,
               submit_content as submitContent,
               submit_img     as submitImg,
               language_type  as languageType,
               submit_status  as submitStatus,
               pass_rate      as passRate,
               runtime,
               memory,
               judge_type     as judgeType,
               judge_user     as judgeUser,
               judge_reason   as judgeReason
        from judge_record
        where problem_id = #{problemId}
          and problem_type = #{problemType}
          and source = #{source}
          and source_id = #{sourceId}
          and user_id = #{userId}
        order by update_time desc
        limit 1
    </select>


    <resultMap id="judgeRecordAndAnswer" type="net.edu.module.vo.JudgeRecordSubmitVO">
        <id property="id" column="id"/>
        <result property="problemId" column="problem_id"/>
        <result property="problemType" column="problem_type"/>
        <result property="source" column="source"/>
        <result property="sourceId" column="source_id"/>
        <result property="userId" column="user_id"/>
        <result property="submitContent" column="submit_content"/>
        <result property="submitImg" column="submit_img"/>
        <result property="submitTime" column="submit_time"/>
        <result property="languageType" column="language_type"/>
        <result property="submitStatus" column="submit_status"/>
        <result property="judgeType" column="judge_type"/>
        <result property="judgeReason" column="judge_reason"/>
        <result property="filePath" column="file_path"/>
        <collection property="sampleVoList" javaType="java.util.ArrayList"
                    ofType="net.edu.module.vo.JudgeSampleResultVO">
            <result property="recordId" column="record_id"/>
            <result property="sampleId" column="sample_id"/>
            <result property="memory" column="memory"/>
            <result property="runtime" column="runtime"/>
            <result property="resultCode" column="result_code"/>
        </collection>
    </resultMap>

    <select id="selectRecordAndAnswer" resultMap="judgeRecordAndAnswer">
        select t.id,
        t.problem_id,
        t.problem_type,
        t.source,
        t.source_id,
        t.user_id,
        t.submit_content,
        t.submit_img,
        t.submit_status,
        t.judge_type,
        t.judge_reason,
        t.submit_time,
        t.language_type,
        b.record_id,
        b.sample_id,
        b.runtime,
        b.memory,
        b.result_code,
        t.file_path
        from (select a.id,
        a.problem_id,
        a.problem_type,
        a.source,
        a.source_id,
        a.user_id,
        a.submit_content,
        a.submit_img,
        a.submit_status,
        a.judge_type,
        a.judge_reason,
        a.submit_time,
        a.language_type,
        a.file_path
        from judge_record a
        where a.problem_id = #{problemId}
        and a.problem_type = #{problemType}
        and a.source = #{source}
        and a.source_id = #{sourceId}
        <if test="userId!=null ">
            and a.user_id = #{userId}
        </if>
        order by a.update_time desc limit 1) t
        left join judge_record_sample b
        on t.id = b.record_id


    </select>

    <update id="updateReasonAndStatus">
        update judge_record t
        set t.judge_type=2,
            t.judge_reason = #{judgeReason},
            t.submit_status = #{submitStatus},
            t.judge_user=#{judgeUser}
        where t.id = #{id}
    </update>

    <select id="selectUserRecord" resultType="java.lang.Integer">
        select count(1)
        from judge_record
        where problem_id = #{problemId}
          and problem_type = #{type}
          and user_id = #{userId}
          and submit_status = 3
        GROUP BY problem_id, problem_type
    </select>

    <insert id="statisticsUserRecord">
        insert into user_record_statistic(user_id,kp_code,difficulty,num)
        select #{userId},a.code,b.difficulty,1
        from problem_knowledge_point a join
        <choose>
            <when test="type == 1">
                problem_choice b
            </when>
            <when test="type == 2">
                problem_fill b
            </when>
            <when test="type == 3">
                problem_code b
            </when>
        </choose>
        on a.code = b.kp_code and b.id = #{problemId}
        ON DUPLICATE KEY UPDATE num = num +1
    </insert>

    <delete id="deleteStatisticsUserRecord">
        delete
        from user_record_statistic
        where user_id = #{userId}
    </delete>

    <insert id="statisticsUserJudgeRecord">
        insert into user_record_statistic(user_id, kp_code, difficulty, num)
        SELECT #{userId} as user_id, kp_code, difficulty, count(1) as num
        from (SELECT kp_code, difficulty
              FROM problem_choice a
              WHERE EXISTS(SELECT 1
                           FROM judge_record
                           WHERE user_id = #{userId}
                             and submit_status = 3
                             and problem_type = 1
                             and problem_id = a.id)
              union all
              SELECT kp_code, difficulty
              FROM problem_fill a
              WHERE EXISTS(SELECT 1
                           FROM judge_record
                           WHERE user_id = #{userId}
                             and submit_status = 3
                             and problem_type = 2
                             and problem_id = a.id)
              union all
              SELECT kp_code, difficulty
              FROM problem_code a
              WHERE EXISTS(SELECT 1
                           FROM judge_record
                           WHERE user_id = #{userId}
                             and submit_status = 3
                             and problem_type = 3
                             and problem_id = a.id)) t
        where kp_code is not null
        GROUP BY kp_code, difficulty
    </insert>

    <select id="selectFilePath" resultType="java.lang.String">
        select jr1.file_path from
        judge_record jr1
        where
        jr1.problem_id = #{problemId}
        and jr1.problem_type = #{problemType}
        and jr1.source = #{source}
        and jr1.source_id = #{sourceId}

        and not exists (select 1 from judge_record jr2 where source_id=#{sourceId} and

        jr1.problem_id = jr2.problem_id and jr1.problem_type=jr2.problem_type and jr1.source_id=jr2.source_id and
        jr1.user_id=jr2.user_id and jr1.source=jr2.source and jr1.id &lt;jr2.id )

    </select>


</mapper>