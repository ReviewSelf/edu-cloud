<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="net.edu.module.dao.ExamAttendLogDao">

    <select id="page" resultType="net.edu.module.vo.ExamAttendLogVO">
        select t.id,
        t.user_id as userId,
        t.exam_id as examId,
        t.name,
        t.join_time as joinTime,
        t.quit_time as quitTime,
        (select score from exam where id = #{query.examId}) as totalScore,
        t.status,
        t.score,
        t.is_correcting as isCorrecting
        from (select a.id,
        a.user_id,
        a.exam_id,
        (select real_name from sys_user b where b.id = a.user_id) as name,
        a.join_time,
        a.quit_time,
        a.status,
        a.score,
        a.is_correcting
        from exam_attend_log a
        where exam_id = #{query.examId}) t
        where 1=1
        <if test="query.name !='' and query.name != null">
            and t.name like concat('%',#{query.name},'%')
        </if>
        <if test="query.status !='' and query.status !=null">
            and t.status = #{query.status}
        </if>
        <if test="query.isCorrecting != '' and query.isCorrecting != null">
            and t.is_correcting=#{query.isCorrecting}
        </if>
        order by status , score desc
    </select>

    <select id="selectUserAttendById" resultType="net.edu.module.vo.ExamAttendLogVO">
        select a.id,
               exam_id      as examId,
               b.description,
               b.begin_time as beginTime,
               b.end_time   as endTime,
               b.name       as examName,
               b.time_limit as timeLimit,
               b.score      as totalScore,
               a.score,
               join_time    as joinTime,
               quit_time    as quitTime,
               status,
               if(status = 1 and
                  DATE_FORMAT(ADDDATE(join_time, INTERVAL time_limit MINUTE), '%Y-%m-%d %H:%i:%s') &lt; end_time,
                  DATE_FORMAT(ADDDATE(join_time, INTERVAL time_limit MINUTE), '%Y-%m-%d %H:%i:%s'),
                  end_time) as finishExamTime
        from exam_attend_log a
                 join exam b on a.exam_id = b.id and b.id = #{examId}
            and a.user_id = #{userId}
    </select>

    <select id="selectUserAttend" resultType="net.edu.module.vo.ExamAttendLogVO">
        select exam_id,
               b.description,
               (select real_name from sys_user where id = user_id) as name,
               b.begin_time                                        as beginTime,
               b.end_time                                          as endTime,
               b.name                                              as examName,
               b.time_limit                                        as timeLimit,
               b.score                                             as totalScore,
               a.score,
               join_time                                           as joinTime,
               quit_time                                           as quitTime,
               status,
               if(status = 1 and
                  DATE_FORMAT(ADDDATE(join_time, INTERVAL time_limit MINUTE), '%Y-%m-%d %H:%i:%s') &lt; end_time,
                  DATE_FORMAT(ADDDATE(join_time, INTERVAL time_limit MINUTE), '%Y-%m-%d %H:%i:%s'),
                  end_time)                                        as finishExamTime
        from exam_attend_log a
                 join exam b on a.exam_id = b.id and b.id = #{examId} from exam_attend_log a join exam b
        on a.exam_id=b.id and b.id=#{examId}
    </select>

    <insert id="insertAttendLogFromClass">
        insert ignore into exam_attend_log (user_id,exam_id,status,score,is_correcting)
        values
        <foreach collection="userList" separator="," item="item" index="index">
            (#{item},#{examId},0,0,0)
        </foreach>
    </insert>

    <update id="updateExamStatus">
        update exam_attend_log set status=#{status}
                               <if test="quitTime!=null">
                                   ,quit_time=#{quitTime}
                               </if>
                               where exam_id = #{examId} and user_id = #{userId}
    </update>

    <update id="updateAttendLogScore">
        update exam_attend_log set score = #{vo.score},is_correcting = #{vo.isCorrecting} where user_id = #{vo.userId} and exam_id = #{vo.examId}
    </update>

    <select id="selectList" resultType="net.edu.module.vo.ExamAttendLogVO">
        select t.id,
        t.user_id as userId,
        t.exam_id as examId,
        t.name,
        t.join_time as joinTime,
        t.quit_time as quitTime,
        (select score from exam where id = #{examId}) as totalScore,
        t.status,
        t.score,
        t.is_correcting as isCorrecting
        from (select a.id,
        a.user_id,
        a.exam_id,
        (select real_name from sys_user b where b.id = a.user_id) as name,
        a.join_time,
        a.quit_time,
        a.status,
        a.score,
        a.is_correcting
        from exam_attend_log a
        where exam_id = #{examId}) t
        where 1=1
        <if test="status !='' and status !=null">
            and t.status = #{status}
        </if>
        <if test="isCorrecting != '' and isCorrecting != null">
            and t.is_correcting=#{isCorrecting}
        </if>
        order by status , score desc
    </select>

    <select id="selectUserExamInfo" resultType="net.edu.module.vo.ExamAttendLogVO">
        select user_id as userId,
               exam_id as examId,
               (select real_name from sys_user where id = user_id) as name,
               join_time as joinTime,
               quit_time as quitTime,
               status,
               is_correcting as isCorrecting,
               score
        from exam_attend_log
        where user_id = #{userId} and exam_id = #{examId}
    </select>

    <select id="selectStudentExamStatisticsInfo" resultType="java.util.HashMap">
        SELECT
            paperName,
            date_format(papersEndTime,'%Y-%m-%d %H:%i:%s') as papersEndTime,
            ifnull(unpaidPapersNum,0) as unpaidPapersNum
        FROM
            (
                SELECT
                    b.NAME AS paperName,
                    b.end_time AS papersEndTime
                FROM
                    exam_attend_log a
                        JOIN exam b ON b.id = a.exam_id
                        AND b.end_time &gt;= now()
	WHERE
		a.user_id = #{userId}  ORDER BY b.end_time LIMIT 1)a,
        (
        SELECT
        sum(
        IF
        ( a.STATUS != 2, 1, 0 )) AS unpaidPapersNum
        FROM
        exam_attend_log a
        JOIN exam b ON b.id = a.exam_id
        AND b.begin_time &lt;
        now()
        AND b.end_time &gt;= now()
        WHERE
        a.user_id = #{userId})b
    </select>


    <select id="selectTeacherExamStatisticsInfo" resultType="java.util.HashMap">
        SELECT
            ifnull(paperNum,0) as paperNum,
            date_format(papersBeginTime,'%Y-%m-%d %H:%i:%s')  papersBeginTime,
            paperName
        FROM
            (
                SELECT
                    sum( 1 ) AS paperNum
                FROM
                    exam
                WHERE
                    teacher_id = #{userId}
                  AND end_time > now()) a,(
                SELECT
                    begin_time AS papersBeginTime,
                    name AS paperName
                FROM
                    exam
                WHERE
                    teacher_id = #{userId}
                  AND end_time > now()
                ORDER BY
                    begin_time
                    LIMIT 1
            ) b
    </select>

    <insert id="insertAttendLogFromAbilityExam">
        insert ignore into exam_attend_log (user_id,exam_id,status,score,is_correcting)
        values
            (#{userId},#{examId},0,0,0)

    </insert>
</mapper>