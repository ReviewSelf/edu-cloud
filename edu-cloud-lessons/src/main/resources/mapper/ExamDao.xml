<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="net.edu.module.dao.ExamDao">

    <resultMap type="net.edu.module.vo.ExamVO" id="examMap">
        <result property="id" column="id"/>
        <result property="paperId" column="paper_id"/>
        <result property="description" column="description"/>
        <result property="beginTime" column="begin_time"/>
        <result property="endTime" column="end_time"/>
        <result property="score" column="score"/>
        <result property="teacherId" column="teacher_id"/>
        <result property="kpCode" column="kp_code"/>
        <result property="name" column="name"/>
        <result property="problemNum" column="problem_num"/>
        <result property="place" column="place"/>
        <collection property="classListName"
                    column="{examId=id}"
                    select="selectExamClass"
                />
    </resultMap>
    <select id="page" resultMap="examMap">
        select a.id,
        a.description,
        a.begin_time,
        a.end_time,
        a.score,
        a.time_limit,
        a.paper_id ,
        a.teacher_id ,
        a.kp_code ,
        a.name,
        a.place
        from exam a
        where a.deleted=0
        <if test="query.classId !=null">
        and exists(select 1 from exam_class ec where ec.class_id=#{query.classId} and ec.exam_id=a.id)
    </if>
        <if test="query.teacherId !=null ">
            and a.teacher_id =#{query.teacherId}
        </if>
        <if test="query.beginTime !=null or query.endTime !=null">
            and a.begin_time &gt;=#{query.beginTime} and a.begin_time &lt; DATE_ADD(#{query.endTime},INTERVAL 1 day)
        </if>
        <if test="query.name != null">
            and a.name like concat('%',#{query.name},'%')
        </if>

        order by a.end_time &lt;= now() ,if(a.end_time &lt;= now(),0,a.end_time) ,a.end_time desc

    </select>

    <select id="selectExamClass" resultType="java.lang.String">
        select b.name from exam_class a join teach_class b
        on a.class_id = b.id  where exam_id=#{examId}
    </select>

    <insert id="insertExam" useGeneratedKeys="true" keyProperty="id" >
        insert into exam(paper_id, description, begin_time, end_time, score, teacher_id, kp_code ,deleted, name, place,
        time_limit, problem_num)
        values
            (#{vo.paperId},#{vo.description},#{vo.beginTime},#{vo.endTime},#{vo.score},#{vo.teacherId},#{vo.kpCode},0,#{vo.name},#{vo.place},#{vo.timeLimit},#{vo.problemNum})
    </insert>

    <insert id="insertExamClass">
        insert into exam_class(exam_id, class_id)
        VALUES (#{id}, #{classId})

    </insert>

    <select id="studentPage" resultType="net.edu.module.vo.ExamVO">
        select a.id,a.name as name , (select name from teach_class where id=a.class_id) as className , a.place as place
        , a.begin_time as beginTime,
        a.end_time as endTime , (select real_name from sys_user where id=a.teacher_id) as teacherName , a.time_limit as
        timeLimit,
        b.status,b.is_correcting as isCorrecting
        from exam a
        join exam_attend_log b on a.id = b.exam_id and b.user_id = #{query.userId}
        where a.deleted = 0
        <if test="query.name != null and query.name != ''">
            and a.name = #{query.name}
        </if>
        <if test="query.className != null and query.className != ''">
            and c.name = #{query.className}
        </if>
        <if test="query.getPlace() != null and query.getPlace()  != ''">
            and a.place = #{query.place}
        </if>
        <if test="query.getBeginTime() !=null and query.getBeginTime()!='' and query.getEndTime() !=null and query.getEndTime()!=''">
            and a.begin_time between #{query.beginTime} and #{query.endTime}
        </if>
        <if test="query.teacherName != null and query.teacherName != ''">
            and d.real_name = #{query.teacherName}
        </if>
        <if test="query.status != null ">
            and b.status = #{query.status}
        </if>
        order by a.end_time &lt;= now() ,if(a.end_time &lt;= now(),0,a.end_time) ,a.end_time desc
    </select>

    <select id="getExamingList" resultType="net.edu.module.vo.ExamVO">
        select a.id,
               a.name                                                   as name,
               (select name from teach_class where id = a.class_id)     as className,
               a.place                                                  as place,
               a.begin_time                                             as beginTime,
               a.end_time                                               as endTime,
               (select real_name from sys_user where id = a.teacher_id) as teacherName,
               a.time_limit                                             as timeLimit,
               b.status,
               a.paper_id                                               as paperId,
               a.problem_num                                            as problemNum
        from exam a
                 join exam_attend_log b on a.id = b.exam_id and b.user_id = #{userId}
        where a.deleted = 0
          and a.end_time &gt;= now()
        order by a.begin_time
    </select>

    <select id="selectPaperManage" resultType="net.edu.module.vo.ExamVO">
        select name        as name,
               begin_time  as beginTime,
               end_time    as endTime,
               score       as score,
               time_limit  as timeLimit,
               problem_num as problemNum
        from exam
        where paper_id = #{paperId}
          and deleted = 0
    </select>

    <select id="selectExamArrangement" resultType="net.edu.module.vo.WxExamArrangementVO">
        select a.name                                                      as examName,
               concat(a.begin_time, '-', a.end_time)                       as examTime,
               a.place                                                     as examPlace,
               (select real_name from sys_user where id = #{vo.teacherId}) as teacher,
               now()                                                       as sendTime,
               b.user_id                                                    as userId
        from exam a
                 left join exam_attend_log b on b.exam_id = a.id
        where deleted = 0
          and a.id=#{vo.id}
    </select>

    <select id="selectPaperByClassId" resultType="net.edu.module.vo.ExamVO">
        SELECT
        t.id,
        t.name ,
        t.description,
        t.difficulty,
        t.problem_num,
        t.score,
        t.kp_code,
        t.status,
        c.remark
        FROM
        problem_paper t
        JOIN teach_plan_paper c ON t.id = c.paper_id
        AND c.plan_id IN ( SELECT b.plan_id FROM teach_plan_paper b JOIN teach_class a ON a.id IN <foreach
            collection="classIdList" item="item" separator="," open="(" close=")">
        #{item}
    </foreach> GROUP BY b.plan_id )
    </select>

</mapper>
