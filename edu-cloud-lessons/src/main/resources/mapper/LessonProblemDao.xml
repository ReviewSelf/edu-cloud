<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="net.edu.module.dao.LessonProblemDao">

    <resultMap type="net.edu.module.entity.LessonProblemEntity" id="lessonProblemMap">
        <result property="id" column="id"/>
        <result property="lessonId" column="lesson_id"/>
        <result property="problemId" column="problem_id"/>
        <result property="problemName" column="problem_name"/>
        <result property="problemType" column="problem_type"/>
        <result property="beginTime" column="begin_time"/>
        <result property="endTime" column="end_time"/>
        <result property="source" column="source"/>
        <result property="type" column="type"/>
        <result property="createTime" column="create_time"/>
        <result property="updateTime" column="update_time"/>
    </resultMap>
    <insert id="insertProblemList" parameterType="net.edu.module.vo.ProblemPaperItemEntity">
        insert ignore into  lesson_problem(lesson_id,score,problem_id,problem_name,problem_type,source,type,sort) values
        <foreach collection="list" item="item" separator=",">
            (
            #{lessonId},#{item.score},#{item.problemId},#{item.problemName},#{item.problemType},1,#{paperType},#{item.sort}
            )
        </foreach>
    </insert>

    <select id="selectLessonProblem" resultType="net.edu.module.vo.LessonProblemVO">
        select id,lesson_id as lessonId,sort,score,problem_id as problemId,problem_name as problemName,used,
              problem_type as problemType,begin_time as beginTime,end_time as endTime,source,type
        from lesson_problem where lesson_id = #{query.lessonId}
            <if test="query.getType!=null">
                and type =#{query.type}
            </if>
        order by type asc,used desc,sort asc,id asc
    </select>

    <insert id="insertProblemListByTeacher" parameterType="net.edu.module.vo.ProblemPaperItemEntity">
        insert ignore into  lesson_problem(lesson_id,score,problem_id,problem_name,problem_type,source,type,sort) values
        <foreach collection="list" item="item" separator=",">
            (
            #{lessonId},#{item.score},#{item.problemId},#{item.problemName},#{item.problemType},#{item.source},#{item.type},#{item.sort}
            )
        </foreach>
    </insert>


    <select id="selectUnfinishedPage" resultType="net.edu.module.vo.LessonProblemVO">
        select id,lesson_id as lessonId,(select name from lesson where id=lesson_id)as lessonName,sort,score,problem_id as problemId,problem_name as problemName,used,
        problem_type as problemType,begin_time as beginTime,end_time as endTime,source,type
        from lesson_problem t
        where type=1 and used=1
        and exists (select 1 from lesson a join  lesson_attend_log b on b.lesson_id=a.id and b.stu_id=#{userId} WHERE a.end_time &lt; now() and  a.id=t.lesson_id)
        and not exists(select 1 FROM judge_record c WHERE t.problem_id=c.problem_id and t.problem_type=c.problem_type and c.source=1 and c.source_id=t.lesson_id and c.submit_status=3 and c.user_id=#{userId})
        order by lesson_id desc
    </select>

</mapper>